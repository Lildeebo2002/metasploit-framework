# -*- coding:binary -*-

require 'spec_helper'

RSpec.describe Msf::Exploit::Remote::Kerberos::Client do
  subject do
    mod = ::Msf::Exploit.new
    mod.extend described_class

    mod.send(:initialize)
    mod
  end

  # KDC_ERR_PREAUTH_FAILED - Additional pre-authentication required
  let(:as_rep_err_preauth_required) do
    decode_kerb_response(
      "\x7e\x81\xae\x30\x81\xab\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x1e"\
      "\xa4\x11\x18\x0f\x32\x30\x32\x32\x30\x35\x32\x36\x31\x35\x34\x32"\
      "\x33\x33\x5a\xa5\x05\x02\x03\x06\x1c\x2b\xa6\x03\x02\x01\x19\xa9"\
      "\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xaa\x1f\x30"\
      "\x1d\xa0\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74"\
      "\x67\x74\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xac\x51"\
      "\x04\x4f\x30\x4d\x30\x16\xa1\x03\x02\x01\x0b\xa2\x0f\x04\x0d\x30"\
      "\x0b\x30\x09\xa0\x03\x02\x01\x17\xa1\x02\x04\x00\x30\x12\xa1\x03"\
      "\x02\x01\x13\xa2\x0b\x04\x09\x30\x07\x30\x05\xa0\x03\x02\x01\x17"\
      "\x30\x09\xa1\x03\x02\x01\x02\xa2\x02\x04\x00\x30\x09\xa1\x03\x02"\
      "\x01\x10\xa2\x02\x04\x00\x30\x09\xa1\x03\x02\x01\x0f\xa2\x02\x04"\
      "\x00"
    )
  end

  # KDC_ERR_C_PRINCIPAL_UNKNOWN
  let(:as_rep_err_c_principal_unknown) do
    decode_kerb_response(
      "\x7e\x5a\x30\x58\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x1e\xa4\x11" \
      "\x18\x0f\x32\x30\x32\x32\x30\x35\x31\x33\x30\x30\x31\x35\x35\x33" \
      "\x5a\xa5\x05\x02\x03\x02\xd0\xf5\xa6\x03\x02\x01\x06\xa9\x0c\x1b" \
      "\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xaa\x1f\x30\x1d\xa0" \
      "\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74" \
      "\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c"
    )
  end

  # KDC_ERR_PREAUTH_FAILED - Pre-authentication information was invalid
  let(:as_rep_err_preauth_failed) do
    decode_kerb_response(
      "\x7e\x81\x8d\x30\x81\x8a\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x1e" \
      "\xa4\x11\x18\x0f\x32\x30\x32\x32\x30\x35\x32\x36\x31\x35\x34\x33" \
      "\x32\x38\x5a\xa5\x05\x02\x03\x0e\x51\x88\xa6\x03\x02\x01\x18\xa9" \
      "\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xaa\x1f\x30" \
      "\x1d\xa0\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74" \
      "\x67\x74\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xac\x30" \
      "\x04\x2e\x30\x2c\x30\x16\xa1\x03\x02\x01\x0b\xa2\x0f\x04\x0d\x30" \
      "\x0b\x30\x09\xa0\x03\x02\x01\x17\xa1\x02\x04\x00\x30\x12\xa1\x03" \
      "\x02\x01\x13\xa2\x0b\x04\x09\x30\x07\x30\x05\xa0\x03\x02\x01\x17"
    )
  end

  # KRB_AP_ERR_SKEW - Clock skew too great
  let(:as_rep_err_skew) do
    decode_kerb_response(
      "\x7e\x5a\x30\x58\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x1e\xa4\x11" \
      "\x18\x0f\x32\x30\x32\x32\x30\x35\x31\x32\x32\x33\x33\x37\x33\x35" \
      "\x5a\xa5\x05\x02\x03\x04\x66\x1e\xa6\x03\x02\x01\x25\xa9\x0c\x1b" \
      "\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xaa\x1f\x30\x1d\xa0" \
      "\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74" \
      "\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c"
    )
  end

  # Success - no error
  let(:as_rep_success) do
    decode_kerb_response(
      "\x6b\x82\x05\x5b\x30\x82\x05\x57\xa0\x03\x02\x01\x05\xa1\x03\x02" \
      "\x01\x0b\xa3\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c" \
      "\xa4\x17\x30\x15\xa0\x03\x02\x01\x01\xa1\x0e\x30\x0c\x1b\x0a\x62" \
      "\x61\x73\x69\x63\x5f\x75\x73\x65\x72\xa5\x82\x04\x13\x61\x82\x04" \
      "\x0f\x30\x82\x04\x0b\xa0\x03\x02\x01\x05\xa1\x0c\x1b\x0a\x44\x45" \
      "\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa2\x1f\x30\x1d\xa0\x03\x02\x01" \
      "\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74\x1b\x0a\x44" \
      "\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa3\x82\x03\xd3\x30\x82\x03" \
      "\xcf\xa0\x03\x02\x01\x17\xa1\x03\x02\x01\x02\xa2\x82\x03\xc1\x04" \
      "\x82\x03\xbd\x2e\xe3\xe5\x8e\xb6\xe1\x0f\x3c\xf4\x03\x7d\xf0\xfd" \
      "\x7f\x76\xc6\x7d\x55\xc4\x91\x28\x48\xbd\xe0\xe2\xbe\xc5\xc2\xe7" \
      "\x62\x02\xc8\x67\x50\x96\xa8\x3e\x3e\x6c\x89\xa2\x0f\x7d\xaa\x98" \
      "\x2a\x92\x69\x1f\xf2\x6b\x4b\x5f\xcd\x8e\x51\xe5\xab\x72\x57\x01" \
      "\xd6\x55\x37\x34\xdc\x7c\x69\x63\x3d\xff\x97\xc5\x58\xb5\x5f\x3f" \
      "\xce\x3a\xdb\xa7\xf9\x73\x63\x19\xa1\xe3\x50\x86\xb3\xf7\x1d\xbf" \
      "\x8c\x63\x05\xce\x98\x82\x6a\x19\x69\x88\x52\xc6\x55\x4b\x6b\x06" \
      "\x8c\x20\xba\xa6\x5e\x4f\x7e\xd9\x62\xe0\xf7\xcc\x31\x76\xc1\x4f" \
      "\xc3\x8b\x20\x32\x00\x2f\x41\x59\xaf\x5b\x6c\x92\xd9\xaf\x6d\xc2" \
      "\xd3\x0a\x76\xce\x92\xf2\xcb\x89\x4c\x47\xe8\xb7\xf0\x5d\xdf\x97" \
      "\xbf\x74\x18\x4f\xe3\x8b\x3c\xf3\x21\x46\xb6\x16\x15\x5e\xc2\x57" \
      "\x16\xfe\x6b\xb2\x76\xb6\x42\x31\xfb\x6a\xe4\xc2\xb3\xf7\x99\x30" \
      "\xd0\x4b\x74\xb2\x16\x11\x92\x36\x32\xb0\xec\x7b\xe4\x7d\xa1\xb1" \
      "\xbe\x52\x10\x25\x95\xb5\x0f\x14\xe8\xd4\x84\xd9\x2d\xf1\x67\x54" \
      "\xd3\x24\x02\xb1\x69\xa0\x3c\x62\x69\x6e\x59\xec\xbd\xa0\xb4\xb4" \
      "\xe7\x31\xb9\xa9\x53\xb8\x76\x31\xf8\x24\x45\x18\x5e\x03\xed\x13" \
      "\xd3\xc3\xef\x79\x13\xea\x14\x69\x8b\x22\xe2\x2d\x56\x4c\xdd\x76" \
      "\xe2\xe0\xe6\x1b\x0e\xb8\xc1\xe8\xd0\x86\xcf\x23\x08\xba\xa5\xd5" \
      "\xd2\x12\x3e\x8f\x11\x52\x07\x40\x2c\xa6\x0c\x92\x31\x57\xaa\xcb" \
      "\x4e\xa2\xba\x69\x78\xab\x8b\xcd\x37\xd8\x78\xe7\x40\x42\x21\x4f" \
      "\xa9\x2d\x4f\xac\x56\x50\xe8\xd1\xc5\xe5\xdf\x82\x2d\x6e\xbe\xa5" \
      "\x5f\xf9\x84\xe0\xc2\x27\x5c\x77\x56\xac\x92\x6e\x3d\x33\x44\xa0" \
      "\x8e\xe9\xc4\x21\x2a\x9c\x2e\xe8\xcd\x26\xd9\x72\x53\xb1\xcb\x4a" \
      "\xc3\x2e\xb9\x54\x6f\x15\xfd\x16\xa4\x50\xbf\xe0\x0f\x2f\x48\x64" \
      "\x98\x2e\xb8\x91\xa8\xaa\x8d\x36\x4a\x48\x5e\x05\xe3\x72\x42\xa1" \
      "\xb9\x84\x54\x90\x8e\x01\x04\x06\x89\xef\x3c\x11\x31\x75\x25\xac" \
      "\x08\xe9\x0d\xb9\x35\x10\x69\x3e\xbe\x0e\x61\x02\x25\xdc\xf3\x17" \
      "\xdb\xd5\x49\xe8\xc1\xc6\x1b\x0e\x0a\x20\x64\x8c\xcf\x0e\x65\xc5" \
      "\x49\xb1\xba\x70\x1f\xdd\x07\x62\xd4\xce\xa3\x0a\xa1\xbc\x95\xed" \
      "\x2b\x5a\x6f\x8a\x35\x78\xa5\x97\x99\xab\x3f\x0d\x78\x3d\x5a\xcf" \
      "\xbc\xfc\xfe\xdc\xf0\x89\xef\xeb\x4c\x22\xd2\xde\x20\x6b\x52\x32" \
      "\x6d\x81\x5f\x64\x70\xef\xd7\x88\x90\x34\x94\x75\xa6\x60\xbe\x54" \
      "\x3b\x6a\x26\x8c\xe7\xaa\x5a\x26\x93\xec\x79\xf6\x23\x68\xef\xf5" \
      "\xc7\x24\x0b\x78\x63\xf4\x7e\x31\x3b\xcb\x77\x22\xd0\x39\xf0\x41" \
      "\xcc\x94\x81\x5c\xd4\xf2\x13\xd7\xe9\x08\x69\xfb\xbe\xbf\x4d\xfe" \
      "\x59\x89\x6a\xeb\x5a\xef\x96\x92\x5b\x80\x23\x8a\xcc\xc0\x1f\x03" \
      "\xd9\x99\x2b\x92\xe9\xea\x5b\x90\xce\x75\x8a\x6e\xd7\xcc\xae\xc6" \
      "\xa4\x5e\x73\x34\x6a\x08\x3e\xe9\xca\x2b\xc9\x41\x72\xe4\xd6\x6d" \
      "\x88\x1c\x8e\x98\xc9\xa4\x9d\x69\x0b\x2c\x65\x1b\xb1\xbf\x78\xca" \
      "\x92\xd2\x0f\x0f\x01\x47\xf3\x02\x0e\x23\x15\xde\x18\x1c\x4e\x33" \
      "\x7a\x65\x37\xaa\x70\x13\x3b\xd3\x45\x71\x1f\xc4\xbc\xa8\xc9\xf3" \
      "\xe0\xe4\x2e\x52\x3f\x0d\xed\xc5\x4f\xf3\x5d\xe8\xe9\xaa\x97\x4c" \
      "\x48\xf9\x01\xab\x0a\x3f\x36\xf7\xa6\x30\xef\x31\xc7\x1e\x46\xa3" \
      "\x97\x59\x57\xbf\x22\xe5\xe9\xf5\x4b\xc9\x52\x68\x51\xcb\x15\xb1" \
      "\xd9\x00\x51\x06\xfb\x54\xbc\x28\xa3\xa7\x6d\x3b\xb1\x8e\x36\x0a" \
      "\x3c\x39\xce\xda\x46\x7f\xed\x22\x42\x0e\xa7\x41\xe6\x64\xe8\x7f" \
      "\x25\xd0\x77\x0f\x45\xf9\xbe\xb6\x8c\x9f\x33\x76\x49\x13\x2b\x2e" \
      "\x19\x50\x6c\xee\x52\x6b\x6b\xf8\x13\xf4\x4e\x3c\xeb\x0c\x6e\x03" \
      "\xb6\x71\xab\xea\xbb\xed\x71\xac\xc3\x1e\x7a\x19\x31\x2c\x87\x52" \
      "\xb8\x5d\x4c\x75\x31\x2a\xe1\xc0\x9b\x49\x65\xe1\xb5\xcc\xbc\xd6" \
      "\x01\x85\xb5\x34\x60\x25\x9d\x89\xe2\x34\xa8\x45\xe7\x77\xbf\x23" \
      "\xa5\x4b\xc5\x5d\x14\xfc\x65\x1a\x95\xd7\xcf\x05\xde\x6a\x5d\xcc" \
      "\xa8\xed\x22\x66\x0c\x9d\xcc\x9f\x53\x3a\xa0\xd2\xfb\x41\xa3\x9e" \
      "\x3b\xcb\xb0\xd1\xbe\x3f\xe0\xab\xf9\x37\xc2\x11\x19\xe8\x6a\x57" \
      "\x26\x77\x12\x49\x44\xb4\xd0\xe7\xba\x08\x45\x7f\x9b\x13\xf0\x4a" \
      "\x5e\x6c\x30\x5a\xaf\x4e\x70\x2f\x7e\x1a\xb8\xde\xe9\x48\x66\xf7" \
      "\x84\x43\xed\xb6\x6c\xac\xb6\x9f\xaa\xc7\x7d\xc9\x27\x63\xde\x01" \
      "\xf0\x93\x15\x7a\x7e\x34\x2d\x5f\xdc\xca\x6d\xa0\xb5\x3a\x7c\xfb" \
      "\xd2\x5a\x00\x2e\xfa\xfb\x19\x90\xb2\xd1\xe6\x0e\x20\x03\x2a\xca" \
      "\x32\xbd\x52\x20\x37\xca\x46\x1f\x0f\x8f\x51\xf1\xee\xb3\x47\x27" \
      "\xa6\x82\x01\x0b\x30\x82\x01\x07\xa0\x03\x02\x01\x17\xa1\x03\x02" \
      "\x01\x03\xa2\x81\xfa\x04\x81\xf7\x35\xc5\x7a\x5b\xa5\x68\x28\xdd" \
      "\x87\x03\xf4\x13\x0a\xc3\xb0\xe6\x20\xf5\xbb\x22\x47\xec\x7d\x35" \
      "\x6e\x15\xde\x1c\x37\xfe\x8b\x92\xba\x84\x29\xec\x19\xbb\x95\xa4" \
      "\x50\xc2\x38\xf2\x9a\x75\xf6\x0e\xcc\x20\x6a\xfb\xea\x9a\x72\xb5" \
      "\x58\x3b\xb4\x6b\x9e\x5d\xcb\x52\x7c\x94\x00\x2a\xfd\x22\xcf\x3c" \
      "\x73\xb9\xa8\x22\xf6\x29\xff\x37\x34\x8f\x43\x65\xb8\xf3\x10\x2a" \
      "\x63\xc5\xc3\x5e\xbc\xf0\xd6\x7f\x8f\x18\xc1\x07\xc5\xa3\x16\x6e" \
      "\x12\x5f\x6f\xf1\xb7\x66\x63\xf0\xe1\xf6\x6f\x41\xda\x53\x40\xec" \
      "\xac\x68\x2b\xe9\x17\x40\xe2\xfa\x83\x94\x28\x8a\x60\x7d\x6e\x1b" \
      "\xd4\xaf\xe7\x98\x98\x4e\x3d\x52\x8c\xb9\x2b\xd5\x0a\xbb\x12\x21" \
      "\xcd\xa0\x3f\x21\xd6\x14\x78\x92\x37\x5b\x8b\xa4\x9e\xab\xf2\xf4" \
      "\xca\x23\x2d\x06\xf7\xa1\x6d\x07\xb1\xe8\x66\xce\x52\x0b\x60\xe5" \
      "\x51\x7b\xe8\x4e\x30\x47\x24\x04\xdc\xeb\xb3\x2f\x59\x87\x92\xa7" \
      "\x14\x4b\xbe\x4b\xf1\x34\x6f\x94\x8a\x1a\x36\x00\xac\xee\xff\x87" \
      "\xd5\x58\xe8\xa4\x92\x6e\xfb\x8b\x72\x96\xbb\x04\x09\x01\xd3\xb8" \
      "\x9e\x54\x62\x48\x73\x6d\xe6\x13\xbb\x3c\xe8\x26\x88\xe4\xcc"
    )
  end

  def decode_kerb_response(data)
    Rex::Proto::Kerberos::Client.new.send(:decode_kerb_response, data)
  end

  describe '#send_request_tgt_pkinit' do
    let(:pfx) do
      cert_string = <<~EOF
        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
        sOG5gYYECCOTwax2BRAH
      EOF

      cert = OpenSSL::PKCS12.new(Base64.decode64(cert_string), '')
      cert
    end

    # Success - no error
    let(:as_rep_success) do
      decode_kerb_response(
        "\x6b\x82\x0f\x09\x30\x82\x0f\x05\xa0\x03\x02\x01\x05\xa1\x03\x02" \
        "\x01\x0b\xa2\x82\x08\xbe\x30\x82\x08\xba\x30\x82\x08\xb6\xa1\x03" \
        "\x02\x01\x11\xa2\x82\x08\xad\x04\x82\x08\xa9\xa0\x82\x08\xa5\x30" \
        "\x82\x08\xa1\x80\x82\x08\x79\x30\x82\x08\x75\x06\x09\x2a\x86\x48" \
        "\x86\xf7\x0d\x01\x07\x02\xa0\x82\x08\x66\x30\x82\x08\x62\x02\x01" \
        "\x03\x31\x0b\x30\x09\x06\x05\x2b\x0e\x03\x02\x1a\x05\x00\x30\x81" \
        "\xb8\x06\x07\x2b\x06\x01\x05\x02\x03\x02\xa0\x81\xac\x04\x81\xa9" \
        "\x30\x81\xa6\xa0\x81\x88\x03\x81\x85\x00\x02\x81\x81\x00\xc3\xb9" \
        "\x7c\x57\x49\xe3\x8e\x45\xe5\x68\xc8\xf1\x1b\xa5\xdc\x0c\x66\xf1" \
        "\x02\x57\x62\x60\xcb\x0b\x4b\x11\x09\xed\x05\xfa\xe3\x7f\x71\xea" \
        "\x0d\x8c\x0d\x3a\xf0\xe4\x52\x89\x08\xf3\x49\x4a\x3f\x89\x3b\x28" \
        "\x46\xf6\x0e\x66\xf8\x65\xf8\xcf\xad\x79\x3d\xce\xe7\xc6\x00\x21" \
        "\x90\xd1\x87\xa6\xf3\xf7\x10\xf1\xc3\x1a\xfb\x9f\x25\x19\x3e\xf5" \
        "\x15\x3a\x83\x69\xc3\x2e\xf4\x7a\x86\x3e\x8c\xa6\xde\x1a\x30\x0e" \
        "\xa8\x6a\x2b\x07\x39\xec\xe2\xe0\x84\x84\x1e\x99\x65\x67\x22\xb0" \
        "\xf8\xa6\xdb\xcf\xf7\x56\xc6\xb9\x82\x4f\x86\xdb\xd2\xb6\xa1\x06" \
        "\x02\x04\x29\x9d\x67\xc7\xa2\x11\x18\x0f\x32\x30\x32\x32\x31\x31" \
        "\x32\x38\x32\x32\x30\x33\x31\x30\x5a\xa0\x82\x05\xcf\x30\x82\x05" \
        "\xcb\x30\x82\x04\xb3\xa0\x03\x02\x01\x02\x02\x13\x16\x00\x00\x00" \
        "\x02\x7f\xb7\xc9\xbb\x35\x99\xaf\x22\x00\x00\x00\x00\x00\x02\x30" \
        "\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x30\x43" \
        "\x31\x15\x30\x13\x06\x0a\x09\x92\x26\x89\x93\xf2\x2c\x64\x01\x19" \
        "\x16\x05\x6c\x6f\x63\x61\x6c\x31\x14\x30\x12\x06\x0a\x09\x92\x26" \
        "\x89\x93\xf2\x2c\x64\x01\x19\x16\x04\x61\x64\x66\x33\x31\x14\x30" \
        "\x12\x06\x03\x55\x04\x03\x13\x0b\x61\x64\x66\x33\x2d\x44\x43\x33" \
        "\x2d\x43\x41\x30\x1e\x17\x0d\x32\x32\x31\x31\x32\x38\x31\x33\x31" \
        "\x33\x30\x39\x5a\x17\x0d\x32\x33\x31\x31\x32\x38\x31\x33\x31\x33" \
        "\x30\x39\x5a\x30\x19\x31\x17\x30\x15\x06\x03\x55\x04\x03\x13\x0e" \
        "\x64\x63\x33\x2e\x61\x64\x66\x33\x2e\x6c\x6f\x63\x61\x6c\x30\x82" \
        "\x01\x22\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05" \
        "\x00\x03\x82\x01\x0f\x00\x30\x82\x01\x0a\x02\x82\x01\x01\x00\xe8" \
        "\x0b\xf1\x7a\x5c\xad\x4d\x0a\x71\xda\x1f\xc8\xfd\x2b\xf1\xc0\x4d" \
        "\x4a\xc5\x6a\xb1\x3a\x8c\x74\x9b\x4f\x2e\x90\x69\x9f\xfa\x88\xe7" \
        "\x1f\x86\xef\x52\xc5\x14\x66\x90\x62\xfa\x64\x4c\x90\xe6\xa3\x05" \
        "\x57\xd3\xc9\x3f\x6a\x22\x47\x55\x07\x20\xc6\x25\x3f\x84\xd2\xf0" \
        "\xfa\x04\x6e\x1f\xc4\xeb\xec\x5c\x9c\x93\xf1\xca\x09\x47\x76\x4b" \
        "\x12\xc6\x10\xbd\xac\x9d\xe4\x16\x44\x33\xe4\xdf\x78\x8e\xba\x28" \
        "\x65\x6b\x45\x91\x8b\xb7\xb5\x3c\x34\x52\x11\x51\xcc\xd1\x6a\x73" \
        "\x5b\x2c\x27\x7c\x06\xc0\x87\x7c\xdc\x7b\x29\x07\x7c\xd8\x2b\x99" \
        "\x18\x2d\xf6\x97\xd8\xd5\x87\x50\xa5\x11\x52\x8d\x9e\x7d\x2e\x93" \
        "\x86\x30\xe3\x3e\x1d\xd0\x47\xad\x51\x62\xba\xf5\x91\xdf\x44\xad" \
        "\x98\xd6\x7c\x7e\xd0\x0e\xc2\xfc\x80\xc2\x3f\x56\xf0\xa1\x36\x94" \
        "\xc4\x65\x66\x7b\xe0\xcd\xe6\x44\x5a\x66\xb8\x5d\xb4\x0e\x9d\x86" \
        "\x61\x4b\xe0\x86\x56\xd6\x43\x05\x20\xd9\x07\xf0\xd4\xaf\x6b\x28" \
        "\x8c\x5a\xd5\xb6\xaf\xfa\xeb\x75\xf6\x96\x96\xcb\x8c\x7b\x8a\x1b" \
        "\x26\x9d\x8b\x11\xcd\x5a\xf5\x6f\x53\x83\xbb\x11\x04\x45\x35\x0b" \
        "\x13\xcf\xcc\x84\xe1\x92\xa7\x93\x08\xac\xbf\x5a\xb7\xf1\xc3\x02" \
        "\x03\x01\x00\x01\xa3\x82\x02\xe0\x30\x82\x02\xdc\x30\x2f\x06\x09" \
        "\x2b\x06\x01\x04\x01\x82\x37\x14\x02\x04\x22\x1e\x20\x00\x44\x00" \
        "\x6f\x00\x6d\x00\x61\x00\x69\x00\x6e\x00\x43\x00\x6f\x00\x6e\x00" \
        "\x74\x00\x72\x00\x6f\x00\x6c\x00\x6c\x00\x65\x00\x72\x30\x1d\x06" \
        "\x03\x55\x1d\x25\x04\x16\x30\x14\x06\x08\x2b\x06\x01\x05\x05\x07" \
        "\x03\x02\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x01\x30\x0e\x06\x03" \
        "\x55\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x05\xa0\x30\x78\x06\x09" \
        "\x2a\x86\x48\x86\xf7\x0d\x01\x09\x0f\x04\x6b\x30\x69\x30\x0e\x06" \
        "\x08\x2a\x86\x48\x86\xf7\x0d\x03\x02\x02\x02\x00\x80\x30\x0e\x06" \
        "\x08\x2a\x86\x48\x86\xf7\x0d\x03\x04\x02\x02\x00\x80\x30\x0b\x06" \
        "\x09\x60\x86\x48\x01\x65\x03\x04\x01\x2a\x30\x0b\x06\x09\x60\x86" \
        "\x48\x01\x65\x03\x04\x01\x2d\x30\x0b\x06\x09\x60\x86\x48\x01\x65" \
        "\x03\x04\x01\x02\x30\x0b\x06\x09\x60\x86\x48\x01\x65\x03\x04\x01" \
        "\x05\x30\x07\x06\x05\x2b\x0e\x03\x02\x07\x30\x0a\x06\x08\x2a\x86" \
        "\x48\x86\xf7\x0d\x03\x07\x30\x1d\x06\x03\x55\x1d\x0e\x04\x16\x04" \
        "\x14\xb4\xb0\xce\x2e\x0e\x5c\xd5\x45\x27\xfd\x8a\x13\xfc\x78\x48" \
        "\xed\x77\x45\x32\x66\x30\x1f\x06\x03\x55\x1d\x23\x04\x18\x30\x16" \
        "\x80\x14\xd9\xad\xbb\x75\x26\x1d\x78\x7e\xb3\xd5\x91\x04\x8a\x8c" \
        "\x5b\x79\x0b\xca\x3b\x94\x30\x81\xc4\x06\x03\x55\x1d\x1f\x04\x81" \
        "\xbc\x30\x81\xb9\x30\x81\xb6\xa0\x81\xb3\xa0\x81\xb0\x86\x81\xad" \
        "\x6c\x64\x61\x70\x3a\x2f\x2f\x2f\x43\x4e\x3d\x61\x64\x66\x33\x2d" \
        "\x44\x43\x33\x2d\x43\x41\x2c\x43\x4e\x3d\x64\x63\x33\x2c\x43\x4e" \
        "\x3d\x43\x44\x50\x2c\x43\x4e\x3d\x50\x75\x62\x6c\x69\x63\x25\x32" \
        "\x30\x4b\x65\x79\x25\x32\x30\x53\x65\x72\x76\x69\x63\x65\x73\x2c" \
        "\x43\x4e\x3d\x53\x65\x72\x76\x69\x63\x65\x73\x2c\x43\x4e\x3d\x43" \
        "\x6f\x6e\x66\x69\x67\x75\x72\x61\x74\x69\x6f\x6e\x2c\x44\x43\x3d" \
        "\x61\x64\x66\x33\x2c\x44\x43\x3d\x6c\x6f\x63\x61\x6c\x3f\x63\x65" \
        "\x72\x74\x69\x66\x69\x63\x61\x74\x65\x52\x65\x76\x6f\x63\x61\x74" \
        "\x69\x6f\x6e\x4c\x69\x73\x74\x3f\x62\x61\x73\x65\x3f\x6f\x62\x6a" \
        "\x65\x63\x74\x43\x6c\x61\x73\x73\x3d\x63\x52\x4c\x44\x69\x73\x74" \
        "\x72\x69\x62\x75\x74\x69\x6f\x6e\x50\x6f\x69\x6e\x74\x30\x81\xbc" \
        "\x06\x08\x2b\x06\x01\x05\x05\x07\x01\x01\x04\x81\xaf\x30\x81\xac" \
        "\x30\x81\xa9\x06\x08\x2b\x06\x01\x05\x05\x07\x30\x02\x86\x81\x9c" \
        "\x6c\x64\x61\x70\x3a\x2f\x2f\x2f\x43\x4e\x3d\x61\x64\x66\x33\x2d" \
        "\x44\x43\x33\x2d\x43\x41\x2c\x43\x4e\x3d\x41\x49\x41\x2c\x43\x4e" \
        "\x3d\x50\x75\x62\x6c\x69\x63\x25\x32\x30\x4b\x65\x79\x25\x32\x30" \
        "\x53\x65\x72\x76\x69\x63\x65\x73\x2c\x43\x4e\x3d\x53\x65\x72\x76" \
        "\x69\x63\x65\x73\x2c\x43\x4e\x3d\x43\x6f\x6e\x66\x69\x67\x75\x72" \
        "\x61\x74\x69\x6f\x6e\x2c\x44\x43\x3d\x61\x64\x66\x33\x2c\x44\x43" \
        "\x3d\x6c\x6f\x63\x61\x6c\x3f\x63\x41\x43\x65\x72\x74\x69\x66\x69" \
        "\x63\x61\x74\x65\x3f\x62\x61\x73\x65\x3f\x6f\x62\x6a\x65\x63\x74" \
        "\x43\x6c\x61\x73\x73\x3d\x63\x65\x72\x74\x69\x66\x69\x63\x61\x74" \
        "\x69\x6f\x6e\x41\x75\x74\x68\x6f\x72\x69\x74\x79\x30\x3a\x06\x03" \
        "\x55\x1d\x11\x04\x33\x30\x31\xa0\x1f\x06\x09\x2b\x06\x01\x04\x01" \
        "\x82\x37\x19\x01\xa0\x12\x04\x10\x8f\x3e\x29\xd0\x6f\xef\xb4\x44" \
        "\xb0\xa5\x2a\xea\x48\x99\x8e\x98\x82\x0e\x64\x63\x33\x2e\x61\x64" \
        "\x66\x33\x2e\x6c\x6f\x63\x61\x6c\x30\x0d\x06\x09\x2a\x86\x48\x86" \
        "\xf7\x0d\x01\x01\x0b\x05\x00\x03\x82\x01\x01\x00\x11\xd0\x14\x49" \
        "\x2c\x1e\x6e\x0b\x27\x40\xfa\x6a\x24\xd9\xd6\x7c\x95\x4f\x5d\xc4" \
        "\x7e\xb4\xe4\x73\x07\xc9\x9a\x71\x6f\xfb\xff\xa6\x8d\x80\xf3\xd9" \
        "\xbc\xe7\xf7\x4e\xf7\x8b\x32\x0b\x48\xad\x84\x5b\xdd\x64\x7c\xe6" \
        "\xc2\x92\x58\x4f\x60\x9a\x3b\x80\xf9\x8d\x2a\x35\x41\xf2\x92\x5b" \
        "\x5f\xc8\xc4\xd0\x03\x98\xe3\xa4\x31\xce\xb0\xe4\xc3\x21\xb0\x46" \
        "\x34\x58\x4e\xd8\xf0\x5c\x70\xca\x6d\xa2\x1a\x40\x75\xd7\x87\x64" \
        "\xc3\x45\x67\xcb\x01\xb5\x1a\xd8\x9a\x88\x25\xe0\xb7\x5a\xd0\x1f" \
        "\x43\xff\x11\x90\xca\xbb\x65\xf9\x9a\xb5\xc7\xfd\xbf\xb9\x55\x2a" \
        "\xfb\xcb\x08\x81\xbe\x48\x20\x80\x79\xdb\x70\x53\x5d\x30\x7a\xcc" \
        "\x1c\xd1\xf9\xdf\xac\xf7\xaf\xbd\x00\xf8\xcd\x94\xb8\xe1\x2e\x19" \
        "\xc7\x91\xc3\xac\xa0\xea\x5e\xa6\xa5\x06\x86\xce\xdd\x47\x4b\x9f" \
        "\x05\x98\xbc\xe8\x5a\xaa\x4e\xa7\x91\xb4\x54\xae\x48\xdf\x34\x7b" \
        "\xbe\xe9\x28\x8a\x6b\xa0\xd5\x91\xbc\xd0\xde\xd2\xee\x14\x06\x21" \
        "\x65\xdd\x4b\x6d\x73\x6d\x01\x96\xc1\x14\x0f\x49\x58\x2c\x99\x13" \
        "\x21\xf6\xd4\x7e\x16\x13\xac\xd5\x3b\x55\x65\x87\xa3\x71\xb5\xf3" \
        "\xcb\x80\xf0\x41\xde\x82\xbf\xf0\xf6\xfb\x02\x60\x31\x82\x01\xc0" \
        "\x30\x82\x01\xbc\x02\x01\x01\x30\x5a\x30\x43\x31\x15\x30\x13\x06" \
        "\x0a\x09\x92\x26\x89\x93\xf2\x2c\x64\x01\x19\x16\x05\x6c\x6f\x63" \
        "\x61\x6c\x31\x14\x30\x12\x06\x0a\x09\x92\x26\x89\x93\xf2\x2c\x64" \
        "\x01\x19\x16\x04\x61\x64\x66\x33\x31\x14\x30\x12\x06\x03\x55\x04" \
        "\x03\x13\x0b\x61\x64\x66\x33\x2d\x44\x43\x33\x2d\x43\x41\x02\x13" \
        "\x16\x00\x00\x00\x02\x7f\xb7\xc9\xbb\x35\x99\xaf\x22\x00\x00\x00" \
        "\x00\x00\x02\x30\x09\x06\x05\x2b\x0e\x03\x02\x1a\x05\x00\xa0\x3d" \
        "\x30\x16\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x09\x03\x31\x09\x06" \
        "\x07\x2b\x06\x01\x05\x02\x03\x02\x30\x23\x06\x09\x2a\x86\x48\x86" \
        "\xf7\x0d\x01\x09\x04\x31\x16\x04\x14\x01\x11\x73\x26\xa6\xf0\x26" \
        "\xb7\xcd\x88\x1e\xd8\xf4\xfd\xb3\x95\xdc\xbd\x2d\xc7\x30\x0d\x06" \
        "\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x04\x82\x01\x00" \
        "\xb7\xe2\x35\x6f\x92\xf8\xcc\x5c\x99\xc6\xf2\xc4\x8a\xa0\x47\xd6" \
        "\xaf\x15\xa5\x5c\x4d\x74\xc8\x00\x83\x5e\x0e\x8a\x69\x3f\x44\x57" \
        "\xc0\xe3\xe7\x11\x96\x75\x9d\x9b\xae\x17\xc1\x16\x35\xe8\x6e\x49" \
        "\x9c\xd8\x74\x4f\xd4\xb3\x9b\x00\xa6\xb7\x94\x65\xc5\xf4\xa3\xe8" \
        "\x46\x64\xc3\x45\xb9\xf0\x54\x63\x28\xfb\x3f\x8d\x14\x4d\x8f\x30" \
        "\x15\xfd\xcb\x9c\xff\xdb\xf8\x0a\x5e\xfc\x56\x3d\xb5\x0d\xf4\x00" \
        "\x5e\x02\x86\xd4\x8e\xf3\x66\x12\xd2\x82\xdb\xba\x73\xb3\x48\x41" \
        "\x08\x2a\xd2\xd8\x59\x47\x06\x86\xbc\x20\x2f\x39\x25\xb4\xf4\xc9" \
        "\x63\xe7\xa9\x1e\xe6\xf3\x70\xfb\x1f\x52\x16\x7b\xb5\xee\x95\x82" \
        "\x53\xc3\xce\xa1\x9a\x47\xec\x92\x19\x12\x93\x50\x7a\x34\x2c\xa7" \
        "\xf3\x30\x99\x95\xf1\x26\x41\x0f\x16\xb7\x16\x82\x86\x71\xa5\x57" \
        "\xd5\x99\xb1\x52\x9a\x1b\x50\x4a\xa0\x5e\x86\x83\xec\xf4\xac\x85" \
        "\x9d\x07\xfd\x28\xf7\xc5\x0e\x9f\x13\xee\x1e\x91\xa0\xe3\x72\xea" \
        "\xf0\xa1\x74\x55\x68\x82\xc1\xf2\x12\xad\xb4\x62\x62\x10\x7c\x83" \
        "\x85\x9f\x8f\x98\x09\x7b\x16\xc3\x0a\x02\x4f\x8d\xda\x41\xd3\x15" \
        "\xe4\x92\x29\x80\x65\x13\x82\x20\x59\x2d\xa0\xee\x53\x7c\x59\x1f" \
        "\xa1\x22\x04\x20\x8e\xc9\x8c\xa9\x22\x82\x1c\x85\x1c\x58\x4b\xe7" \
        "\xe5\x1f\x00\x60\x75\x77\x1a\xd6\x2e\xaf\x19\x4b\xf0\x6a\x3c\x91" \
        "\xf5\x80\x85\xdb\xa3\x0c\x1b\x0a\x41\x44\x46\x33\x2e\x4c\x4f\x43" \
        "\x41\x4c\xa4\x1a\x30\x18\xa0\x03\x02\x01\x01\xa1\x11\x30\x0f\x1b" \
        "\x0d\x41\x64\x6d\x69\x6e\x69\x73\x74\x72\x61\x74\x6f\x72\xa5\x82" \
        "\x04\xea\x61\x82\x04\xe6\x30\x82\x04\xe2\xa0\x03\x02\x01\x05\xa1" \
        "\x0c\x1b\x0a\x41\x44\x46\x33\x2e\x4c\x4f\x43\x41\x4c\xa2\x1f\x30" \
        "\x1d\xa0\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74" \
        "\x67\x74\x1b\x0a\x61\x64\x66\x33\x2e\x6c\x6f\x63\x61\x6c\xa3\x82" \
        "\x04\xaa\x30\x82\x04\xa6\xa0\x03\x02\x01\x12\xa1\x03\x02\x01\x02" \
        "\xa2\x82\x04\x98\x04\x82\x04\x94\xf9\x0a\x9d\x64\x87\xc5\x2c\x1f" \
        "\x56\x7c\x92\x73\x24\x1b\x01\x95\x37\xc6\x4c\xa5\x96\xdc\xe1\x91" \
        "\x30\x19\x48\xc7\x2e\x96\x76\xaa\x62\xdc\x33\xcd\x38\x65\x65\x75" \
        "\x98\xa4\x04\x9c\x6c\x8d\x51\x72\x10\xc8\x06\x04\x70\x43\x5e\xc3" \
        "\xc2\x3f\xda\x59\x47\xf6\x6b\x66\xa8\xfc\x42\xb3\x20\x67\x1c\x42" \
        "\x3b\x36\xa5\x8d\x63\x24\xed\x6a\x62\x08\xac\x81\xae\xd0\x76\x4a" \
        "\x88\x41\xfa\xc8\xf6\xbb\x8a\xb3\x38\x5d\xc8\x97\xc4\x13\x88\xeb" \
        "\x54\x3d\xda\x4e\x79\xd0\x70\x53\x2e\xca\xb9\x08\x4c\xb5\x4b\xde" \
        "\x29\x98\xf5\x26\xfd\x8f\x64\x15\x3c\x18\x5e\x0d\xeb\x3a\xb1\x34" \
        "\x13\xf2\x2c\x7b\x66\xab\xe6\x6a\x9a\xfe\xc7\xc0\xc6\x60\xa4\xad" \
        "\x4f\x52\x70\x80\xde\x49\x11\x1e\x4b\x37\x7b\x79\x8d\x67\xd3\x96" \
        "\x3b\x8b\x35\x22\xe0\xd4\x0a\x21\x09\xd0\x9f\x14\xce\xaf\xe3\x24" \
        "\x6e\x5b\x3f\xf8\x43\x09\x03\xd6\xd2\xc4\xaf\x53\xe5\x34\x90\x58" \
        "\x7c\x00\x2d\x1b\xba\xb1\x4c\x76\xed\x71\x51\x95\xae\x8e\x65\x63" \
        "\xb6\xc2\x7e\x94\xff\xff\x59\xa0\x68\x14\x06\xec\x37\x46\x15\x75" \
        "\x50\x67\x40\x90\xe9\xc6\xad\x97\xf5\x16\x08\x04\xf9\x73\x9a\x4b" \
        "\x34\xf4\x0b\x4a\x85\x43\x97\xcf\x1e\x0a\xc7\xb5\x12\x37\xcd\x4b" \
        "\xd7\x09\x84\x86\xe6\x66\xa8\x6f\x2e\x5c\xb6\x97\x78\xe0\xda\x71" \
        "\x3d\x1a\x3f\xe4\xd4\xd6\x29\x72\x86\x51\xbb\x7b\x85\x20\x6c\xc5" \
        "\x00\xde\x64\x86\xa3\x2f\xc3\x37\x59\xef\x79\x83\xd1\x3a\x70\x5e" \
        "\xe4\x1a\xe6\xdd\xa4\x85\xa0\x8d\x89\xff\x48\x47\x5b\xff\xc8\x9d" \
        "\x0b\xf3\x75\x2e\xec\x4d\xb3\x7f\x5a\x0d\x97\xe9\xc7\xd6\x6e\x7e" \
        "\x52\xd2\x46\x66\x75\x21\x31\x25\x16\x16\xdb\x8f\x7a\x65\xd6\x9b" \
        "\x40\xb3\x7b\xe7\xfe\xa4\x6f\x3e\x45\xd4\x07\xec\x25\xf4\xb0\xc4" \
        "\x8a\x5f\xa7\xfb\xdc\xd4\x25\x8c\xcc\x13\x9c\x78\x4d\x7a\x24\x49" \
        "\xaa\x30\xc3\x9e\x2e\x45\x90\x99\xc7\x1a\x3b\x5b\x2c\xb1\x72\x54" \
        "\x64\xb9\xc4\xa6\xed\xb9\xcf\x32\x27\xb8\x96\xf4\xa6\xcb\xb2\x4b" \
        "\x7f\xb6\x06\x2d\x63\xc7\x7a\xf0\xee\x34\x40\xdd\x7f\x29\xca\x8c" \
        "\x3e\xc0\x5c\x5c\xbe\x53\x3f\x37\xd5\x3e\xd6\x6a\xb0\xb1\xfd\xc4" \
        "\xdc\x53\xde\x57\xf4\x4e\xd8\x7a\xcf\x05\xc2\x9e\x38\x61\x1a\x20" \
        "\xe3\xf5\x2e\xd0\xe8\xe1\x95\x61\x35\x22\x10\x12\x0f\x4d\x6e\xf7" \
        "\x37\xfa\x4c\x2f\xee\xd8\x03\x3d\x5d\xbc\x9c\xf7\xd0\x41\xbc\x9c" \
        "\xdd\x88\xcf\x50\xc3\xea\x8d\xd5\xe5\xb3\x98\x3a\x00\x9e\x6c\xb3" \
        "\x61\x5e\x13\x6f\x0b\x30\xb4\x54\xcd\x22\x0e\x0c\x44\x56\xd2\x28" \
        "\x09\x71\xa5\x2a\x70\x5e\xe8\x7d\x60\xf1\xdf\xbf\xe3\x52\x53\x61" \
        "\xa0\xe5\x5e\x96\x46\xb6\xc6\x19\x89\xe3\x48\xad\x6a\xb3\x9e\xe7" \
        "\xd7\xfb\x0d\x14\x83\x30\xe3\x98\x5f\xa6\x83\xed\x71\xf0\x29\xfc" \
        "\x9e\x56\xf0\x97\x04\x59\x93\xf8\x8d\x29\x2a\x2b\x4b\x84\xa6\x26" \
        "\x2f\x6e\x30\x8a\xf8\xee\x1c\x91\xba\x74\x66\xad\x18\x89\xe0\xaf" \
        "\x46\x6e\x98\xd9\x31\x61\x13\x11\x67\x58\x69\xa3\x50\xa5\x60\x05" \
        "\xaa\xf8\x82\x52\xb0\xb1\x79\x58\x7a\x93\x90\x34\x1c\x4f\xc9\x15" \
        "\x0a\xc5\x33\x8a\x24\xd1\x36\x96\xfe\xeb\xec\x6a\xa7\x9c\x2f\x72" \
        "\xcd\x53\xb8\x9c\x16\xbd\xbd\xc0\x1f\x05\x80\xb6\xd7\x78\xed\x23" \
        "\x97\x13\x6e\xfe\x74\x25\x4d\x26\x6f\x7d\x7e\x24\xe2\xe3\x40\x45" \
        "\x6e\xab\x6c\xe6\x90\x56\x0b\x01\x8d\x7a\x1a\x7b\x7a\x87\x07\x81" \
        "\xfb\x96\x5b\xfb\x57\x51\xac\x3b\x74\xe6\xc0\x5b\x61\x4a\x4f\xed" \
        "\xfd\xd3\x73\x17\xc1\x67\xac\xd7\x0f\x24\xc0\x41\x34\x25\x1e\x03" \
        "\xce\xc8\x0d\xc7\x6d\xbb\x45\x86\xf0\xcd\x0e\xe6\xe7\x08\xbf\xfa" \
        "\x61\x29\x16\x75\x09\xee\x99\x8f\xdb\x40\x0e\x8f\x67\xf5\xbf\x59" \
        "\xf1\xe8\xe5\xd1\xa2\xcd\x8f\x61\xde\x74\x7b\xf0\x2d\x01\x84\xb4" \
        "\xc7\x05\x9d\x0d\xd9\xd3\x7c\x85\x13\x20\xfb\xca\x99\xfd\x42\x7d" \
        "\x4a\xd0\x02\x1d\x0c\x75\x2c\x5d\xf3\xc2\x94\xf1\xad\x9e\x23\x0b" \
        "\xff\x43\xb5\x1e\x3b\xf3\x3f\xa6\x79\xcf\x36\x8b\xef\x2a\x1a\x6c" \
        "\x78\xe9\x14\xb9\x34\x25\x71\x91\x89\x3e\x39\xd7\x8e\x04\x1d\xe9" \
        "\x22\x0c\xd4\x81\x9d\xd9\x0e\x17\xe0\x95\xd9\xce\x93\xce\xaf\x2b" \
        "\xab\x39\xd3\x1f\x2b\x48\x1d\x9a\x6a\xe5\xd7\xe7\x5e\x95\x82\x50" \
        "\x71\x30\x5a\xd2\x97\x3c\x6b\xbb\xc0\x4a\x8e\xf2\x71\x19\x35\x95" \
        "\xf7\x2f\x69\x90\x2a\xf5\x17\xd8\x0d\x39\xc1\xf0\x42\x01\x08\x99" \
        "\xe2\x1d\x5e\x62\x76\x5e\x0b\x34\xe7\x18\xeb\xea\x84\x75\x8a\x43" \
        "\x7e\x4f\x90\x22\xf1\x85\x05\x10\xdf\x0f\xe0\x1a\xb9\xd8\x3e\xe5" \
        "\xbd\xcd\x14\xaa\x55\xfe\x56\x52\x16\x97\x93\x6b\xf1\x12\xa2\x8c" \
        "\x8d\xb7\xa4\xb8\x63\x20\x40\x96\xb0\x5d\x6a\x38\x51\x9b\xb9\x22" \
        "\xb8\x7c\x9d\x85\x1c\xb2\x8b\xdd\x73\xb3\x5a\x3e\xe6\xe9\x75\xeb" \
        "\x91\x9b\x32\x50\x5c\x0a\x12\x5a\xe4\xec\x51\xd5\x38\x20\x96\x7e" \
        "\xa9\xb7\x08\xc2\x64\x5f\xa8\x66\x39\x6b\x28\xa1\xe6\x9e\xcd\x19" \
        "\x46\xff\xbb\xf4\xf0\x3f\x27\x75\x3a\xb0\xa4\xac\x36\x18\x99\xe6" \
        "\x7d\xb6\xa8\x2f\xd3\xd4\x67\xc4\x80\x3d\xcd\x67\x13\xaf\x86\x70" \
        "\xe3\x57\x4f\xb6\x49\xe3\x88\xae\x38\xae\x51\x7d\xd8\xe8\x2f\xca" \
        "\xf5\x07\xb1\x15\xae\x93\xdc\xe0\x50\x25\x7d\x92\xea\xea\x77\x06" \
        "\x44\x4f\x6d\xd2\x7f\xc6\x9b\x72\xb3\xe7\xb2\x38\xd8\xc8\x0a\x33" \
        "\x13\x5c\xcd\x6d\x41\x71\x9f\x97\x9e\xb0\x83\x97\xe9\xc0\x7f\x9b" \
        "\x08\x37\x5a\x33\x54\xb7\x4d\x22\x3e\x99\xf3\x70\xc7\xbd\x83\x5c" \
        "\x3c\xa8\xdc\x3a\xa8\xb5\x7a\xbc\x37\x7e\x31\x63\x73\xaf\x90\xe6" \
        "\xaf\x47\xae\x92\x4d\xa5\x19\xe9\x50\x51\xf1\xb7\xa6\x82\x01\x1d" \
        "\x30\x82\x01\x19\xa0\x03\x02\x01\x12\xa2\x82\x01\x10\x04\x82\x01" \
        "\x0c\xc4\x81\x51\xdc\x89\x62\x2c\x23\xb6\x77\x20\x3b\x6e\x80\x08" \
        "\x04\x48\x30\x20\xd3\xea\x46\x63\x4a\x53\xc7\xd6\xbe\xc0\x3d\x33" \
        "\x09\xb3\xf0\x2c\x9d\x2f\xa2\xef\x89\x1c\xfe\x86\x64\xfc\xab\x31" \
        "\x43\xe1\x1a\x96\x5e\xf3\xfd\x33\x2b\x8c\xc7\x75\x8b\xcb\x51\x12" \
        "\x66\xe9\x26\x3b\xf5\xba\xfb\x1c\x95\xda\x3a\x3c\xe2\xa9\x72\x93" \
        "\x83\x16\xc8\xca\xd2\xcd\x31\xd0\x41\x66\xe7\x5b\x91\xe2\x25\xff" \
        "\x97\xda\xa6\xc7\xc8\x8b\x48\x7b\x07\x0e\x81\x7f\xdb\xe7\x0e\xab" \
        "\x35\xbe\xf7\xf2\xe9\xaf\x78\xf6\xf4\x40\xd7\x38\x94\x9a\xd8\xf6" \
        "\x69\x78\x95\xc8\x17\xa6\x0c\xee\xf2\x4a\xd4\x8d\xc4\x53\x9f\xd2" \
        "\x1e\x62\xce\x34\xcd\x78\x39\x1e\x0c\xbf\x2e\xc4\x8a\x24\xb4\x95" \
        "\x6c\xcf\x8c\xf3\x82\xd6\xfb\x0c\x9f\x40\x6b\x61\x7c\x0a\x78\x6a" \
        "\xc2\x99\x08\x84\x9a\x17\xec\x90\x30\x49\xac\x19\xbf\xd8\xf3\x35" \
        "\x4d\xb1\x90\x8b\xc9\x4e\x6d\xa1\x52\xf3\x31\xe6\x43\xb4\x76\xe8" \
        "\xb7\x67\x72\xb0\xe1\x0c\x13\x0f\x7e\xb9\x2b\x07\xda\xce\x4c\xa0" \
        "\x0f\x5b\x94\x8e\xf0\x54\xc6\xa3\x81\x4c\xc6\x37\x2f\xd7\x82\xa8" \
        "\xce\x0c\xc2\x88\xb4\x6c\xab\xe1\xf0\x79\x67\x43\x57\x41\x38\x1b" \
        "\xdc\xdd\x09\x37\x97\xfc\x28\x3e\x87\x8c\xf0\xc8\xa7".b
      )
    end

    let(:mock_client) do
      instance_double(Rex::Proto::Kerberos::Client, close: nil)
    end

    let(:mock_decrypted_part) { double :mock_decrypted_part }
    let(:mock_kerberos_responses) { [] }

    before(:each) do
      allow(mock_client).to receive(:send_recv).and_return(*mock_kerberos_responses)
      allow(Rex::Proto::Kerberos::Client).to receive(:new).and_return(mock_client)
      # The use of build_dh in the implementation makes it impossible to decrypt the enc_part, as the call to generate_key can't be mocked
      allow(subject).to receive(:decrypt_kdc_as_rep_enc_part).and_return(mock_decrypted_part)
    end

    context 'when the authentication succeeds' do
      let(:mock_kerberos_responses) do
        [as_rep_success]
      end

      it 'returns the ticket' do
        res = subject.send_request_tgt_pkinit(
          server_name: 'krbtgt/adf3.local',
          username: 'Administrator',
          realm: 'adf3.local',
          pfx: pfx,
        )

        expect(res.ticket.realm).to eq('ADF3.LOCAL')
        expect(res.ticket.sname.name_string).to eq(['krbtgt', 'adf3.local'])
        expect(res.preauth_required).to be true
        expect(res.decrypted_part).to eq(mock_decrypted_part)
        expect(res.krb_enc_key).to include({ enctype: 18, key: a_string_matching(/.{32}/) })
        expect(mock_client).to have_received(:send_recv).once
      end
    end
  end

  describe '#send_request_tgt' do
    let(:mock_client) do
      instance_double(Rex::Proto::Kerberos::Client, close: nil)
    end

    let(:mock_kerberos_responses) { [] }

    before(:each) do
      allow(mock_client).to receive(:send_recv).and_return(*mock_kerberos_responses)
      allow(Rex::Proto::Kerberos::Client).to receive(:new).and_return(mock_client)
    end

    context 'when the account is unknown' do
      let(:mock_kerberos_responses) do
        [as_rep_err_c_principal_unknown]
      end

      it 'raises an erorr' do
        expect do
          subject.send_request_tgt(
            server_name: 'krbtgt/DEMO.local',
            client_name: 'unknown_user',
            password: 'password',
            realm: 'DEMO.local'
          )
        end.to raise_error(Rex::Proto::Kerberos::Model::Error::KerberosError, /Client not found in Kerberos database/)
        expect(mock_client).to have_received(:send_recv).once
      end
    end

    context 'when kerberos preauth is not required' do
      let(:mock_kerberos_responses) do
        [as_rep_success]
      end

      it 'returns the ticket' do
        res = subject.send_request_tgt(
          server_name: 'krbtgt/DEMO.local',
          client_name: 'basic_user',
          password: nil,
          realm: 'DEMO.local'
        )

        expect(res.ticket.realm).to eq('DEMO.LOCAL')
        expect(res.ticket.sname.name_string).to eq(['krbtgt', 'DEMO.LOCAL'])
        expect(res.preauth_required).to be false
        expect(res.decrypted_part).to be_nil
        expect(res.krb_enc_key).to be_nil
        expect(mock_client).to have_received(:send_recv).once
      end
    end

    context 'when kerberos preauth is required' do
      context 'when the authentication succeeds' do
        let(:mock_kerberos_responses) do
          [as_rep_err_preauth_required, as_rep_success]
        end

        it 'returns the ticket' do
          res = subject.send_request_tgt(
            server_name: 'krbtgt/DEMO.local',
            client_name: 'basic_user',
            password: 'password',
            realm: 'DEMO.local'
          )

          expect(res.ticket.realm).to eq('DEMO.LOCAL')
          expect(res.ticket.sname.name_string).to eq(['krbtgt', 'DEMO.LOCAL'])
          expect(res.preauth_required).to be true
          expect(res.decrypted_part.srealm).to eq('DEMO.LOCAL')
          expect(res.decrypted_part.sname.name_string).to eq(['krbtgt', 'DEMO.LOCAL'])
          expect(res.decrypted_part.flags.enabled_flag_names).to eq(%i[FORWARDABLE PROXIABLE RENEWABLE INITIAL PRE_AUTHENT])
          expect(res.krb_enc_key).to eq({ enctype: 23, key: "\x88F\xF7\xEA\xEE\x8F\xB1\x17\xAD\x06\xBD\xD80\xB7Xl", salt: nil})
          expect(mock_client).to have_received(:send_recv).twice
        end
      end

      context 'when the authentication fails' do
        let(:mock_kerberos_responses) do
          [as_rep_err_preauth_required, as_rep_err_preauth_failed]
        end

        it 'returns the ticket' do
          expect do
            subject.send_request_tgt(
              server_name: 'krbtgt/DEMO.local',
              client_name: 'basic_user',
              password: 'password',
              realm: 'DEMO.local'
            )
          end.to raise_error(Rex::Proto::Kerberos::Model::Error::KerberosError, /Pre-authentication information was invalid/)
          expect(mock_client).to have_received(:send_recv).twice
        end
      end

      context 'when a clock skew error is returned' do
        let(:mock_kerberos_responses) do
          [as_rep_err_preauth_required, as_rep_err_skew]
        end

        it 'raises an error' do
          expect do
            subject.send_request_tgt(
              server_name: 'krbtgt/DEMO.local',
              client_name: 'basic_user',
              password: 'password',
              realm: 'DEMO.local'
            )
          end.to raise_error(Rex::Proto::Kerberos::Model::Error::KerberosError, /Clock skew too great.*off by \d+ seconds/)
          expect(mock_client).to have_received(:send_recv).twice
        end
      end
    end
  end
end
