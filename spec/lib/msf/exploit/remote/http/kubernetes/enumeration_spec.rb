# -*- coding: binary -*-

require 'spec_helper'

RSpec.describe Msf::Exploit::Remote::HTTP::Kubernetes::Enumeration do
  include_context 'Msf::UIDriver'

  let(:mock_module) do
    mixin = described_class
    Class.new(::Msf::Exploit) do
      include mixin
      public *mixin.protected_instance_methods
    end
  end

  let(:valid_auth_response) do
    {
      "kind": "SelfSubjectRulesReview",
      "apiVersion": "authorization.k8s.io/v1",
      "metadata": {
        "creationTimestamp": nil
      },
      "spec": {},
      "status": {
        "resourceRules": [
          {
            "verbs": [
              "get",
              "list"
            ],
            "apiGroups": [
              "*"
            ],
            "resources": [
              "pod",
              "job"
            ],
            "resourceNames": [
              "test-resource"
            ]
          },
        ],
        "nonResourceRules": [
          {
            "verbs": [
              "get",
            ],
            "nonResourceURLs": [
              "/apis/*",
              "/version",
            ]
          }
        ],
        "incomplete": false
      }
    }.deep_symbolize_keys
  end

  let(:mock_namespace) do
    "mock-namespace"
  end

  subject do
    instance = mock_module.new
    capture_logging(instance)
    instance
  end

  it 'prints auth' do
    expected = <<~EOF.lines(chomp: true)
     Auth (namespace: mock-namespace)
     ================================

       Resources  Non-Resource URLs  Resource Names   Verbs
       ---------  -----------------  --------------   -----
       job.*      []                 [test-resource]  [get list]
       pod.*      []                 [test-resource]  [get list]
                  [/apis/*]          []               [get]
                  [/version]         []               [get]
    EOF
    subject.print_auth(mock_namespace, valid_auth_response)
    expect(@output).to eq(expected)
  end
end
