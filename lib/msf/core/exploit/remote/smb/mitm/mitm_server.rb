require 'socket'

module Msf::Exploit::Remote::SMB::Mitm
  # This class provides the SMB server core. Settings that are relevant server wide are managed by this object.
  # Currently, the server only supports negotiating and authenticating requests. No other server functionality is
  # available at this time. The negotiating and authentication is supported for SMB versions 1 through 3.1.1.
  class MITMServer < ::RubySMB::Server
    # Run the server and accept any connections. For each connection, the block will be executed if specified. When the
    # block returns false, the loop will exit and the server will no long accept new connections.
    def run(&block)
      loop do
        sock = @socket.accept
        server_client = Msf::Exploit::Remote::SMB::Mitm::MITMServerClient.new(self, RubySMB::Dispatcher::Socket.new(sock))
        @connections << Connection.new(server_client, Thread.new {
          $stderr.puts "thread created successfully"
          begin
            server_client.run
          rescue => e
            $stderr.puts "MITMServerClient Exeption: #{e} #{e.backtrace.join("\n")} - server thread dead"
            print_error "#{e.message}"
            elog(e)
          end
        })

        break unless block.nil? || block.call(server_client)
      end
    end

    # The dialects that this server will negotiate with clients, in ascending order of preference.
    # @!attribute [r] dialects
    #   @return [Array<String>]
    attr_reader :dialects

    # The GSS Provider instance that this server will use to authenticate
    # incoming client connections.
    # @!attribute [r] gss_provider
    #   @return [RubySMB::Gss::Provider::Base]
    attr_reader :gss_provider

    # The 16 byte GUID that uniquely identifies this server instance.
    # @!attribute [r] server_guid
    attr_reader :guid
  end
end

