# -*- coding: binary -*-

module Msf
  class Exploit
    class Remote
      module Kerberos
        module Client
          module AsResponse

            # Extracts the session key from a Kerberos AS Response
            #
            # @param res [Rex::Proto::Kerberos::Model::KdcResponse]
            # @param key [String]
            # @return [Rex::Proto::Kerberos::Model::EncKdcResponse]
            # @see Rex::Proto::Kerberos::Model::KdcResponse
            # @see Rex::Proto::Kerberos::Model::EncryptedData.decrypt
            # @see Rex::Proto::Kerberos::Model::EncKdcResponse
            # @see Rex::Proto::Kerberos::Model::EncKdcResponse.decode
            # @see Rex::Proto::Kerberos::Model::EncryptionKey
            def extract_enc_kdc_response(res, key)
              # TODO: Confirm how to deterministically do this based on context. Code copy/pasta'd into extract_kerb_creds
              decrypt_res = nil
              # [
              #   Rex::Proto::Kerberos::Crypto::ENC_AS_RESPONSE,
              #   Rex::Proto::Kerberos::Crypto::ENC_TGS_RESPONSE,
              # ]

              (0..255).each do |message_type|
                decrypt_res = res.enc_part.decrypt(key, message_type)
                break
              rescue => e
                nil
              end
              if decrypt_res.nil?
                raise "as_response failed decoding #{res} with key #{key.unpack1("H*")}"
              end
              enc_res = Rex::Proto::Kerberos::Model::EncKdcResponse.decode(decrypt_res)
              enc_res
            end

            # Extracts the session key from a Kerberos AS Response
            #
            # @param res [Rex::Proto::Kerberos::Model::KdcResponse]
            # @param key [String]
            # @return [Rex::Proto::Kerberos::Model::EncryptionKey]
            # @see Rex::Proto::Kerberos::Model::KdcResponse
            # @see Rex::Proto::Kerberos::Model::EncryptedData.decrypt
            # @see Rex::Proto::Kerberos::Model::EncKdcResponse
            # @see Rex::Proto::Kerberos::Model::EncKdcResponse.decode
            # @see Rex::Proto::Kerberos::Model::EncryptionKey
            def extract_session_key(res, key)
              kdc_res = extract_enc_kdc_response(res, key)
              kdc_res.key
            end

            # Extracts the logon time from a Kerberos AS Response
            #
            # @param res [Rex::Proto::Kerberos::Model::KdcResponse]
            # @param key [String]
            # @return [Integer]
            # @see Rex::Proto::Kerberos::Model::KdcResponse
            # @see Rex::Proto::Kerberos::Model::EncryptedData.decrypt
            # @see Rex::Proto::Kerberos::Model::EncKdcResponse
            # @see Rex::Proto::Kerberos::Model::EncKdcResponse.decode
            def extract_logon_time(res, key)
              kdc_res = extract_enc_kdc_response(res, key)
              auth_time = kdc_res.auth_time

              auth_time.to_i
            end
          end
        end
      end
    end
  end
end
